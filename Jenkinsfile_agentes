pipeline {
    agent{
        label 'default'
    }

    environment {
        AWS_REGION = 'us-east-1'
        STAGE = 'production'
    }

    stages {
        stage('Download configuration and stash files') {
            steps {
                withCredentials([string(credentialsId: 'git_pat', variable: 'PAT')]) {
                    sh """
                        echo 'STAGE --> Download configuration and stash files'
                        echo 'Host name:'; hostname
                        echo 'User:'; whoami
                        echo 'Workspace:'; pwd
                    """
                    script {
                        // calculate url of configuration file
                        def configFileUrl = "https://raw.githubusercontent.com/vierodan/unir-devops-cp1D-config/${env.STAGE}/samconfig.toml"
                        
                        // config file name
                        def configFileName = "samconfig.toml"
                        
                        // download the file using curl
                        sh "curl -u vierodan:\$PAT -o ${configFileName} ${configFileUrl}"
                    }
                }
            }
            post{
                always{
                    stash includes: '**/*', name: 'sourceCode'
                }
            }
        }
        stage('Deploy'){
            steps{
                unstash 'sourceCode'

                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh """
                        echo 'STAGE --> Deploy'
                        echo 'Host name:'; hostname
                        echo 'User:'; whoami
                        echo 'Workspace:'; pwd
                    """

                    //sam build command
                    sh "sam build"

                    sleep(time: 1, unit: 'SECONDS')

                    //sam deploy command
                    sh "sam deploy \
                            --region ${env.AWS_REGION} \
                            --config-env ${env.STAGE} \
                            --template-file template.yaml \
                            --config-file samconfig.toml \
                            --no-fail-on-empty-changeset \
                            --no-confirm-changeset"
                }
            }
        }
        stage('Extract stack outputs') {
            steps {
                unstash 'sourceCode'

                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh """
                        echo 'STAGE --> Extract stack outputs'
                        echo 'Host name:'; hostname
                        echo 'User:'; whoami
                        echo 'Workspace:'; pwd
                    """

                    echo "Value for --> STAGE: ${env.STAGE}"
                    echo "Value for --> AWS_REGION: ${env.AWS_REGION}"

                    script {
                        //asign permissions to execut scripts
                        sh "chmod +x get_base_url_api.sh"

                        //execute extract_output.sh script for extract outputs url's from sam deploy command
                        sh "./get_base_url_api.sh ${env.STAGE} ${env.AWS_REGION}"

                        sleep(time: 2, unit: 'SECONDS')
                    }
                }
            }
            post{
                always{
                    stash includes: 'base_url_api.tmp', name: 'result_url'
                }
            }
        }
        stage('Integration tests') {
            agent{
                label 'agent2'
            }
            steps {
                unstash 'sourceCode'
                unstash 'result_url'

                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh """
                        echo 'STAGE --> Integration tests'
                        echo 'Host name:'; hostname
                        echo 'User:'; whoami
                        echo 'Workspace:'; pwd
                    """

                    script{
                        //list temporal files created with url's for all endpoint
                        sh "ls -l *.tmp"

                        //read temporal files and asing the value to environment variable
                        def base_url = readFile('base_url_api.tmp').trim()

                        sh """
                            export BASE_URL=${base_url}
                            pytest --junitxml=result-rest.xml test/integration/todoApiTest.py
                        """
                    }
                }
            }
            post{
                always{
                    stash includes: 'result-rest.xml', name: 'results_rest'

                    //clean temporal files
                    sh "rm *.tmp"
                }
            }
        }
    }
    post {
        always {
            unstash 'results_rest'
            sleep(time: 2, unit: 'SECONDS')
            junit 'result*.xml'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        unstable {
            echo 'Pipeline failed.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}